generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  avatar    String?
  googleId  String    @unique
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  events   Event[]
  tickets  Ticket[]
  checkIns CheckIn[]

  @@index([email])
  @@index([googleId])
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  location    String
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user          User           @relation(fields: [userId], references: [id])
  eventSettings EventSettings?
  tickets       Ticket[]
  ticketTypes   TicketType[]
  checkIns      CheckIn[]

  @@index([userId])
}

model EventSettings {
  id        Int       @id @default(autoincrement())
  type      EventType @default(OFFLINE) // OFFLINE or ONLINE
  capacity  Int
  eventId   Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  event Event @relation(fields: [eventId], references: [id])
}

model Ticket {
  id           Int          @id @default(autoincrement())
  userId       Int
  eventId      Int
  ticketTypeId Int
  status       TicketStatus @default(PENDING) // PENDING, CONFIRMED, CANCELLED
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?

  user       User       @relation(fields: [userId], references: [id])
  event      Event      @relation(fields: [eventId], references: [id])
  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])
  checkIns   CheckIn[]
  Payment    Payment[]

  @@index([userId])
  @@index([eventId])
  @@index([ticketTypeId])
}

model TicketType {
  id             Int       @id @default(autoincrement())
  name           String
  price          Float     @default(0.0) // 0.0 means free ticket
  maxPerPurchase Int       @default(1)
  zone           String?
  eventId        Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  event   Event    @relation(fields: [eventId], references: [id])
  tickets Ticket[]

  @@index([eventId])
}

model Venue {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CheckIn {
  id           Int       @id @default(autoincrement())
  userId       Int
  eventId      Int
  ticketId     Int
  qrCode       String    @unique
  securityHash String // Hash for security validation
  checkInAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  user   User   @relation(fields: [userId], references: [id])
  event  Event  @relation(fields: [eventId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@index([userId])
  @@index([eventId])
  @@index([ticketId])
}

model Payment {
  id        Int           @id @default(autoincrement())
  ticketId  Int
  method    PaymentMethod
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?

  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
}

enum Role {
  USER
  ADMIN
}

enum EventType {
  OFFLINE
  ONLINE
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  PROMPTPAY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
